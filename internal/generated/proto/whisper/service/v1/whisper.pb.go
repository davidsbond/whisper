// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: whisper/service/v1/whisper.proto

// Package whisper.service.v1 provides the gRPC service used for joining and leaving the gossip network.

package whispersvcv1

import (
	v1 "github.com/davidsbond/whisper/internal/generated/proto/whisper/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The JoinRequest message describes a peer's intent to join the gossip network.
type JoinRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The peer that wishes to join the network.
	Peer          *v1.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{0}
}

func (x *JoinRequest) GetPeer() *v1.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

// The JoinResponse message is returned when a peer has been accepted into the gossip network.
type JoinResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current state of the gossip network as known to the peer that handled the join request.
	Peers         []*v1.Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{1}
}

func (x *JoinResponse) GetPeers() []*v1.Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// The LeaveRequest message describes a peer's intent to leave the gossip network.
type LeaveRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The peer's unique identifier.
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{2}
}

func (x *LeaveRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// The LeaveResponse message is returned when a peer has been marked as having left the gossip network.
type LeaveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveResponse) Reset() {
	*x = LeaveResponse{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveResponse) ProtoMessage() {}

func (x *LeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveResponse.ProtoReflect.Descriptor instead.
func (*LeaveResponse) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{3}
}

// The StatusRequest message is used to obtain the current status of the gossip network according to a single
// peer.
type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{4}
}

// The StatusResponse message describes the current status of the gossip network according to the called peer.
type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The peer's own data.
	Self *v1.Peer `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// All peers within the gossip network.
	Peers         []*v1.Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{5}
}

func (x *StatusResponse) GetSelf() *v1.Peer {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *StatusResponse) GetPeers() []*v1.Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type CheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{6}
}

func (x *CheckRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_service_v1_whisper_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_whisper_service_v1_whisper_proto_rawDescGZIP(), []int{7}
}

var File_whisper_service_v1_whisper_proto protoreflect.FileDescriptor

const file_whisper_service_v1_whisper_proto_rawDesc = "" +
	"\n" +
	" whisper/service/v1/whisper.proto\x12\x12whisper.service.v1\x1a\x18whisper/v1/whisper.proto\"3\n" +
	"\vJoinRequest\x12$\n" +
	"\x04peer\x18\x01 \x01(\v2\x10.whisper.v1.PeerR\x04peer\"6\n" +
	"\fJoinResponse\x12&\n" +
	"\x05peers\x18\x01 \x03(\v2\x10.whisper.v1.PeerR\x05peers\"\x1e\n" +
	"\fLeaveRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\"\x0f\n" +
	"\rLeaveResponse\"\x0f\n" +
	"\rStatusRequest\"^\n" +
	"\x0eStatusResponse\x12$\n" +
	"\x04self\x18\x01 \x01(\v2\x10.whisper.v1.PeerR\x04self\x12&\n" +
	"\x05peers\x18\x02 \x03(\v2\x10.whisper.v1.PeerR\x05peers\"\x1e\n" +
	"\fCheckRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\"\x0f\n" +
	"\rCheckResponse2\xc8\x02\n" +
	"\x0eWhisperService\x12I\n" +
	"\x04Join\x12\x1f.whisper.service.v1.JoinRequest\x1a .whisper.service.v1.JoinResponse\x12L\n" +
	"\x05Leave\x12 .whisper.service.v1.LeaveRequest\x1a!.whisper.service.v1.LeaveResponse\x12O\n" +
	"\x06Status\x12!.whisper.service.v1.StatusRequest\x1a\".whisper.service.v1.StatusResponse\x12L\n" +
	"\x05Check\x12 .whisper.service.v1.CheckRequest\x1a!.whisper.service.v1.CheckResponseBXZVgithub.com/davidsbond/whisper/internal/generated/proto/whisper/service/v1;whispersvcv1b\x06proto3"

var (
	file_whisper_service_v1_whisper_proto_rawDescOnce sync.Once
	file_whisper_service_v1_whisper_proto_rawDescData []byte
)

func file_whisper_service_v1_whisper_proto_rawDescGZIP() []byte {
	file_whisper_service_v1_whisper_proto_rawDescOnce.Do(func() {
		file_whisper_service_v1_whisper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_whisper_service_v1_whisper_proto_rawDesc), len(file_whisper_service_v1_whisper_proto_rawDesc)))
	})
	return file_whisper_service_v1_whisper_proto_rawDescData
}

var file_whisper_service_v1_whisper_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_whisper_service_v1_whisper_proto_goTypes = []any{
	(*JoinRequest)(nil),    // 0: whisper.service.v1.JoinRequest
	(*JoinResponse)(nil),   // 1: whisper.service.v1.JoinResponse
	(*LeaveRequest)(nil),   // 2: whisper.service.v1.LeaveRequest
	(*LeaveResponse)(nil),  // 3: whisper.service.v1.LeaveResponse
	(*StatusRequest)(nil),  // 4: whisper.service.v1.StatusRequest
	(*StatusResponse)(nil), // 5: whisper.service.v1.StatusResponse
	(*CheckRequest)(nil),   // 6: whisper.service.v1.CheckRequest
	(*CheckResponse)(nil),  // 7: whisper.service.v1.CheckResponse
	(*v1.Peer)(nil),        // 8: whisper.v1.Peer
}
var file_whisper_service_v1_whisper_proto_depIdxs = []int32{
	8, // 0: whisper.service.v1.JoinRequest.peer:type_name -> whisper.v1.Peer
	8, // 1: whisper.service.v1.JoinResponse.peers:type_name -> whisper.v1.Peer
	8, // 2: whisper.service.v1.StatusResponse.self:type_name -> whisper.v1.Peer
	8, // 3: whisper.service.v1.StatusResponse.peers:type_name -> whisper.v1.Peer
	0, // 4: whisper.service.v1.WhisperService.Join:input_type -> whisper.service.v1.JoinRequest
	2, // 5: whisper.service.v1.WhisperService.Leave:input_type -> whisper.service.v1.LeaveRequest
	4, // 6: whisper.service.v1.WhisperService.Status:input_type -> whisper.service.v1.StatusRequest
	6, // 7: whisper.service.v1.WhisperService.Check:input_type -> whisper.service.v1.CheckRequest
	1, // 8: whisper.service.v1.WhisperService.Join:output_type -> whisper.service.v1.JoinResponse
	3, // 9: whisper.service.v1.WhisperService.Leave:output_type -> whisper.service.v1.LeaveResponse
	5, // 10: whisper.service.v1.WhisperService.Status:output_type -> whisper.service.v1.StatusResponse
	7, // 11: whisper.service.v1.WhisperService.Check:output_type -> whisper.service.v1.CheckResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_whisper_service_v1_whisper_proto_init() }
func file_whisper_service_v1_whisper_proto_init() {
	if File_whisper_service_v1_whisper_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_whisper_service_v1_whisper_proto_rawDesc), len(file_whisper_service_v1_whisper_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_whisper_service_v1_whisper_proto_goTypes,
		DependencyIndexes: file_whisper_service_v1_whisper_proto_depIdxs,
		MessageInfos:      file_whisper_service_v1_whisper_proto_msgTypes,
	}.Build()
	File_whisper_service_v1_whisper_proto = out.File
	file_whisper_service_v1_whisper_proto_goTypes = nil
	file_whisper_service_v1_whisper_proto_depIdxs = nil
}
