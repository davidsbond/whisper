// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: whisper/v1/whisper.proto

// Package whisper.v1 contains types used by the whisper protocol to describe the state of peers within the gossip
// network.

package whisperv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The PeerStatus enumeration contains values describing the different states of a peer.
type PeerStatus int32

const (
	// PEER_STATUS_UNSPECIFIED is used as the default value, where no status has been set. This should be invalid in
	// all cases where it is encountered.
	PeerStatus_PEER_STATUS_UNSPECIFIED PeerStatus = 0
	// PEER_STATUS_JOINING denotes that a peer is joining the gossip network and may not have yet received any peer
	// data.
	PeerStatus_PEER_STATUS_JOINING PeerStatus = 1
	// PEER_STATUS_JOINED denotes that a peer has successfully joined the gossip network and is sharing data among
	// peers.
	PeerStatus_PEER_STATUS_JOINED PeerStatus = 2
	// PEER_STATUS_LEAVING denotes that a peer is leaving the gossip network.
	PeerStatus_PEER_STATUS_LEAVING PeerStatus = 3
	// PEER_STATUS_LEFT denotes that a peer has left the gossip network and should not be contacted for further updates.
	PeerStatus_PEER_STATUS_LEFT PeerStatus = 4
	// PEER_STATUS_GONE denotes that a peer has not sent an update to another peer in a large enough period of time to
	// be considered offline.
	PeerStatus_PEER_STATUS_GONE PeerStatus = 5
)

// Enum value maps for PeerStatus.
var (
	PeerStatus_name = map[int32]string{
		0: "PEER_STATUS_UNSPECIFIED",
		1: "PEER_STATUS_JOINING",
		2: "PEER_STATUS_JOINED",
		3: "PEER_STATUS_LEAVING",
		4: "PEER_STATUS_LEFT",
		5: "PEER_STATUS_GONE",
	}
	PeerStatus_value = map[string]int32{
		"PEER_STATUS_UNSPECIFIED": 0,
		"PEER_STATUS_JOINING":     1,
		"PEER_STATUS_JOINED":      2,
		"PEER_STATUS_LEAVING":     3,
		"PEER_STATUS_LEFT":        4,
		"PEER_STATUS_GONE":        5,
	}
)

func (x PeerStatus) Enum() *PeerStatus {
	p := new(PeerStatus)
	*p = x
	return p
}

func (x PeerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_whisper_v1_whisper_proto_enumTypes[0].Descriptor()
}

func (PeerStatus) Type() protoreflect.EnumType {
	return &file_whisper_v1_whisper_proto_enumTypes[0]
}

func (x PeerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerStatus.Descriptor instead.
func (PeerStatus) EnumDescriptor() ([]byte, []int) {
	return file_whisper_v1_whisper_proto_rawDescGZIP(), []int{0}
}

// The Peer type represents a single peer within the gossip ,network.
type Peer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The peer's unique identifier.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The address advertised to the peer for gossip-based communications.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The public key of the peer used to decrypt peer messages.
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// A value indicating the freshness of this peer data, should be increased when the peer's metadata is
	// modified.
	Delta int64 `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	// Arbitrary metadata for the peer, described using any protobuf message defined by the user.
	Metadata *anypb.Any `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The current status of the peer.
	Status        PeerStatus `protobuf:"varint,6,opt,name=status,proto3,enum=whisper.v1.PeerStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_whisper_v1_whisper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_v1_whisper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_whisper_v1_whisper_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Peer) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Peer) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *Peer) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Peer) GetStatus() PeerStatus {
	if x != nil {
		return x.Status
	}
	return PeerStatus_PEER_STATUS_UNSPECIFIED
}

// The PeerMessage type is sent from peer to peer via UDP and contains encrypted data on a single peer within
// the gossip network.
type PeerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the peer sending this message. This value should be used to look-up a public key
	// from which a shared secret can be derived.
	SourceId uint64 `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The nonce used when encrypting the Peer's data.
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The encrypted, protobuf-encoded Peer.
	Ciphertext    []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerMessage) Reset() {
	*x = PeerMessage{}
	mi := &file_whisper_v1_whisper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMessage) ProtoMessage() {}

func (x *PeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_v1_whisper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMessage.ProtoReflect.Descriptor instead.
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return file_whisper_v1_whisper_proto_rawDescGZIP(), []int{1}
}

func (x *PeerMessage) GetSourceId() uint64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *PeerMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *PeerMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

var File_whisper_v1_whisper_proto protoreflect.FileDescriptor

const file_whisper_v1_whisper_proto_rawDesc = "" +
	"\n" +
	"\x18whisper/v1/whisper.proto\x12\n" +
	"whisper.v1\x1a\x19google/protobuf/any.proto\"\xc7\x01\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\fR\tpublicKey\x12\x14\n" +
	"\x05delta\x18\x04 \x01(\x03R\x05delta\x120\n" +
	"\bmetadata\x18\x05 \x01(\v2\x14.google.protobuf.AnyR\bmetadata\x12.\n" +
	"\x06status\x18\x06 \x01(\x0e2\x16.whisper.v1.PeerStatusR\x06status\"`\n" +
	"\vPeerMessage\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\x04R\bsourceId\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\fR\x05nonce\x12\x1e\n" +
	"\n" +
	"ciphertext\x18\x03 \x01(\fR\n" +
	"ciphertext*\x9f\x01\n" +
	"\n" +
	"PeerStatus\x12\x1b\n" +
	"\x17PEER_STATUS_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13PEER_STATUS_JOINING\x10\x01\x12\x16\n" +
	"\x12PEER_STATUS_JOINED\x10\x02\x12\x17\n" +
	"\x13PEER_STATUS_LEAVING\x10\x03\x12\x14\n" +
	"\x10PEER_STATUS_LEFT\x10\x04\x12\x14\n" +
	"\x10PEER_STATUS_GONE\x10\x05BMZKgithub.com/davidsbond/whisper/internal/generated/proto/whisper/v1;whisperv1b\x06proto3"

var (
	file_whisper_v1_whisper_proto_rawDescOnce sync.Once
	file_whisper_v1_whisper_proto_rawDescData []byte
)

func file_whisper_v1_whisper_proto_rawDescGZIP() []byte {
	file_whisper_v1_whisper_proto_rawDescOnce.Do(func() {
		file_whisper_v1_whisper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_whisper_v1_whisper_proto_rawDesc), len(file_whisper_v1_whisper_proto_rawDesc)))
	})
	return file_whisper_v1_whisper_proto_rawDescData
}

var file_whisper_v1_whisper_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_whisper_v1_whisper_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_whisper_v1_whisper_proto_goTypes = []any{
	(PeerStatus)(0),     // 0: whisper.v1.PeerStatus
	(*Peer)(nil),        // 1: whisper.v1.Peer
	(*PeerMessage)(nil), // 2: whisper.v1.PeerMessage
	(*anypb.Any)(nil),   // 3: google.protobuf.Any
}
var file_whisper_v1_whisper_proto_depIdxs = []int32{
	3, // 0: whisper.v1.Peer.metadata:type_name -> google.protobuf.Any
	0, // 1: whisper.v1.Peer.status:type_name -> whisper.v1.PeerStatus
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_whisper_v1_whisper_proto_init() }
func file_whisper_v1_whisper_proto_init() {
	if File_whisper_v1_whisper_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_whisper_v1_whisper_proto_rawDesc), len(file_whisper_v1_whisper_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_whisper_v1_whisper_proto_goTypes,
		DependencyIndexes: file_whisper_v1_whisper_proto_depIdxs,
		EnumInfos:         file_whisper_v1_whisper_proto_enumTypes,
		MessageInfos:      file_whisper_v1_whisper_proto_msgTypes,
	}.Build()
	File_whisper_v1_whisper_proto = out.File
	file_whisper_v1_whisper_proto_goTypes = nil
	file_whisper_v1_whisper_proto_depIdxs = nil
}
